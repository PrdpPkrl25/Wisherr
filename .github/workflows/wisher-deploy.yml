name: Build

on: [push]

jobs:
  push_to_registry:
    name: Build and push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.ref == 'refs/heads/main' }}
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/wisherr:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/wisherr:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/wisherr:buildcache,mode=max
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
        
      - name: Create the Mattermost Message
        run: |
          if ${{ steps.docker_build.outcome == 'success' }}; then
            echo "{\"text\":\"Sucessfully build and pushed wisherr:latest image\"}" > mattermost.json
          else
            echo "{\"text\":\"Build failed\"}" > mattermost.json
          fi
      - uses: mattermost/action-mattermost-notify@master
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          
  super-job:
    needs: [push_to_registry]
    name: pull image from dockerhub and deploy in server
    runs-on: ubuntu-18.04
    container: 
        image: prdppkrl25/wisherr:latest
        credentials:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
        - name: executing remote ssh commands using ssh key
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SERVER_IP }}
            username: root
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: ${{ secrets.SERVER_PORT }}
            script: |
              docker pull prdppkrl25/wisherr:latest
              docker stop wisherr_app
              docker system prune -f
              docker run -d -p 8008:8000 --name=wisherr_app prdppkrl25/wisherr:latest
              docker exec -it wisherr_app bash
              php artisan serve --host=0.0.0.0 -port=8000

    
